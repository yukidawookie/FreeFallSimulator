import math

g = 9.81
fluidDensityAir = 1.225
dragCoeff = 0.5
planetList = ["Sun", "Mercury", "Venus", "Earth", "Moon", "Mars", "Jupiter", "Saturn", "Uranus", "Neptune", "Custom"]
planetG = [274.13, 3.59, 8.87, 9.81, 1.62, 3.77, 25.95, 11.08, 10.67, 14.07, 1]
listNum = 0
listLength = len(planetList)

def constantEditor():

    def changeG():
        change = input("Do you want to change your value of g? 'yes' or 'no': ")
        if change == 'yes':
            constantChange()
        elif change == 'no':
            print("g = 9.81\n")
        else:
            print("type yes or no")
            changeG()
    
        
    def constantChange():
        global g
        listNum = 0
        while listNum < listLength:
            print(planetList[listNum], " ", listNum )
            listNum = listNum + 1
        gNum = int(input("type the number corresponding to the planet, or 10 for your own custom value:"))
        if -1 < gNum < 10:
            g = planetG[gNum]
        elif gNum == 10:
            g = float(input("What is your new value of g: "))
        else:
            print("Uh oh, looks like you typed your number wrong, try again")
            constantChange()
                
    
    changeG()

def introduction():
    print("\nWelcome to the free fall simulator")
    print("This simulator will calculate the time taken for an object to fall to the ground")
    print("It takes into account air resistance and terminal velocity")
    print("The other constant values can be edited near the top of the code where they are declared\n\n")
    
def getInput():
    global height
    global area
    global mass
    height = float(input("Height from which object is falling(metres): "))
    area = float(input("Projected Area of the object(metres squared): "))
    mass = float(input("Mass of object(kg): "))

    
    

    
def terminalVelocity():
    upperNume = 2 * mass * g
    lowerNume = fluidDensityAir * area * dragCoeff
    discriminant = upperNume / lowerNume
    global termVelocity
    termVelocity = math.sqrt(discriminant)
    return termVelocity
    
def fallTime():
    terminalVelocity()
    termTime = termVelocity / g
    termDist = (termTime ** 2) * 0.5 * g
    global timeTaken
    if termDist > height:
        timeTaken = math.sqrt(height/(0.5*g))
        print("\nThe time taken for the object to fall is:",timeTaken, " seconds")
        print("Terminal Velocity was not reached\n")
        return timeTaken
    else:
        time2 = (height - termDist) / termVelocity
        timeTaken = termTime + time2
        print("\nThe time taken for the object to fall is:",timeTaken, " seconds")
        print("Terminal Velocity was reached\n")
        return timeTaken
   


def main():
    
    getInput()
    fallTime()
    
    def restarter():
        restartDesc = input("\nRestart program? 'yes' or 'no': ")
        if restartDesc == 'yes':
            main()
        elif restartDesc == 'no':
            quit()
        else:
            print("Please type yes or no:")
            restarter()
    
    restarter()

introduction()    
constantEditor()
main()

